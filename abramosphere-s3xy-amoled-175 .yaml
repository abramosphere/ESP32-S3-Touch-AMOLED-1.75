substitutions:
  name: esphome-amoled-175
  friendly_name: Home Assistant Voice

  imagemodel: "HomeAssistant"
  imagewidth: "466"
  imageheight: "466"
  rotate_display: "0"

  loading_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/replying_320_240.png
  timer_finished_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/timer_finished_320_240.png
  mute_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/error_320_240.png
  error_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/error_320_240.png
  error_no_wifi_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-wifi.png
  error_no_ha_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-ha.png

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "000000"
  thinking_illustration_background_color: "000000"
  replying_illustration_background_color: "000000"
  error_illustration_background_color: "000000"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  font_family: Figtree
  font_glyphsets: GF_Latin_Core
  
esphome:
  name: s3xy-amoled-lux-175
  friendly_name: s3xy-amoled-lux-175
  min_version: 2024.6.0
  name_add_mac_suffix: false
  on_boot:
    priority: 600
    then:
      - switch.turn_on: amp_enable  # Enable audio amplifier on boot
      - delay: 500ms  # Increased delay for amp stabilization
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

psram:
  mode: octal
  speed: 80MHz

api:
  encryption:
    key: "V8+LH4rpbiywoed5ulHtgkOmYTZOLRe8v0UjSPJyeqA="
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome
    password: !secret ota_password

logger:
  level: INFO
  hardware_uart: USB_SERIAL_JTAG

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${name} Fallback"
    password: !secret wifi_ap_password
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

  - platform: restart
    id: reboot_btn
    name: "Reboot Device"
    icon: "mdi:restart"
    entity_category: config

binary_sensor:
  - platform: template
    name: "Touch Button"
    id: touch_input
    on_multi_click:
      # Single tap
      - timing:
          - ON for 40ms to 400ms
          - OFF for at least 330ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      lambda: return id(wake_word_engine_location).state == "On device";
                    then:
                      - if:
                          condition:
                            not:
                              voice_assistant.is_running:
                          then:
                            - voice_assistant.start:
                          else:
                            - voice_assistant.stop:  

  - platform: gpio
    pin:
      number: 0
      mode: INPUT_PULLUP
      ignore_strapping_warning: true
      inverted: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - if:
                    condition:
                      not:
                        voice_assistant.is_running:
                    then:
                      - voice_assistant.start:                     
                    else:
                      - voice_assistant.stop:                     
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

i2c:
  - id: bus_a
    scl: GPIO14
    sda: GPIO15
    scan: false

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO45
    i2s_bclk_pin: GPIO9
    i2s_mclk_pin: GPIO42

audio_dac:
  - platform: es8311
    id: es8311_dac
    i2c_id: bus_a
    address: 0x18
    bits_per_sample: 16bit
    sample_rate: 16000

audio_adc:
  - platform: es7210
    i2c_id: bus_a
    id: es7210_adc
    address: 0x40
    mic_gain: 30db  # Increased for better sensitivity
    bits_per_sample: 16bit
    sample_rate: 16000

microphone:
  - platform: i2s_audio
    id: box_mic
    i2s_audio_id: i2s_audio_bus
    sample_rate: 16000
    i2s_din_pin: GPIO10
    bits_per_sample: 16bit
    adc_type: external
    pdm: false  # Ensure we're using standard I2S, not PDM
    use_apll: false  # Disable APLL to reduce I2S conflicts

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    dac_type: external
    i2s_dout_pin: GPIO8
    sample_rate: 16000
    bits_per_sample: 16bit
    buffer_duration: 64ms
    use_apll: false  # Disable APLL to reduce I2S conflicts
  
media_player:
  - platform: speaker
    name: None
    id: external_media_player
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 16000
      num_channels: 1
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
      - id: wake_word_triggered_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/wake_word_triggered.flac
    on_announcement:
      - delay: 100ms  # Give I2S bus time to stabilize
      - if:
          condition:
            microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            - delay: 300ms  # Wait for microphone to fully stop
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      condition:
                        not:
                          voice_assistant.is_running:
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display

    on_idle:
      - delay: 500ms  # Extended delay for I2S bus stability
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_jarvis
    - alexa
  on_wake_word_detected:
    - if:
        condition:
          switch.is_on: wake_sound
        then:
          - media_player.speaker.play_on_device_media_file:
              media_file: wake_word_triggered_sound
          - delay: 300ms
    - voice_assistant.start:

voice_assistant:
  id: va
  microphone: box_mic
  media_player: external_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 0.3  # Significantly reduced to prevent I2S conflicts
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - lambda: 'id(text_request).publish_state(x);'
    - script.execute: draw_display
  on_tts_start:
    - lambda: 'id(text_response).publish_state(x);'
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    - delay: 500ms  # Extended delay for I2S bus stabilization
    - wait_until:
        condition:
          media_player.is_announcing:
        timeout: 2s
    - wait_until:
        condition:
          and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
        timeout: 5s
    - delay: 1s  # Additional delay to ensure I2S bus is fully released
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - delay: 500ms  # Extended delay before restarting wake word
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - delay: 100ms  # Stabilization delay
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 2s  # Increased delay for error recovery
          - script.execute: stop_wake_word  # Ensure wake word is properly stopped
          - delay: 500ms
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
                - script.execute: start_wake_word  # Restart wake word after error
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        condition:
          media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(main_display).show_page(listening_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(main_display).show_page(thinking_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(main_display).show_page(replying_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(main_display).show_page(error_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(main_display).show_page(muted_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(main_display).show_page(no_ha_page);
                                id(main_display).update();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(main_display).show_page(timer_finished_page);
                                id(main_display).update();
                                break;
                              default:
                                id(main_display).show_page(idle_page);
                                id(main_display).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: main_display
                else:
                  - display.page.show: no_wifi_page
                  - component.update: main_display
          else:
            - display.page.show: initializing_page
            - component.update: main_display

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          if (timers.empty()) return;
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          if (timers.empty()) return;
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int active_pixels = round( 466 * id(global_first_active_timer).seconds_left / std::max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            if (active_pixels > 0){
              id(main_display).filled_rectangle(0 , 436 , 466 , 30 , Color::WHITE );
              id(main_display).filled_rectangle(0 , 438 , active_pixels , 26 , id(active_timer_color) );
            }
          } else if (id(global_is_timer)){
            id(fetch_first_timer).execute();
            int active_pixels = round( 466 * id(global_first_timer).seconds_left / std::max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            if (active_pixels > 0){
              id(main_display).filled_rectangle(0 , 436 , 466 , 30 , Color::WHITE );
              id(main_display).filled_rectangle(0 , 438 , active_pixels , 26 , id(paused_timer_color) );
            }
          }
  
  - id: draw_active_timer_widget
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(global_is_timer_active)){
            id(main_display).filled_rectangle(156 , 40 , 154 , 50 , Color::WHITE );
            id(main_display).rectangle(156 , 40 , 154 , 50 , Color::BLACK );

            id(fetch_first_active_timer).execute();
            int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            std::string display_string = "";
            if (hours_left > 0) {
              display_string = display_hours + ":" + display_minute;
            } else {
              display_string = display_minute + ":" + display_seconds;
            }
            id(main_display).printf(233, 52, id(font_timer), Color::BLACK, "%s", display_string.c_str());
          }
  
  - id: start_wake_word
    then:
      - delay: 1s  # Extended stabilization delay for I2S bus
      - if:
          condition:
            and:
              - not:
                  voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - delay: 500ms
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - delay: 500ms
            - voice_assistant.start_continuous:
  
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - delay: 300ms  # Ensure proper stop
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - delay: 300ms
            - micro_wake_word.stop:
  
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display
  
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      - lambda: |-
              id(external_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      - media_player.stop:
          announcement: true
    on_turn_on:
      - lambda: |-
            id(external_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(external_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

  - platform: template
    id: wake_sound
    name: Wake sound
    icon: "mdi:bullhorn"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: template
    id: show_text
    name: Show Text
    icon: "mdi:card-text-outline"
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON

  - platform: gpio
    pin: GPIO46
    id: amp_enable
    name: "Speaker Amplifier Enable"
    icon: "mdi:volume-high"
    entity_category: config
    restore_mode: ALWAYS_ON
    internal: false

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: In Home Assistant
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                condition:
                  lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop:
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop:
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start:

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false

image:
  - file: ${loading_illustration_file}
    id: casita_initializing
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${idle_illustration_file}
    id: casita_idle
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${listening_illustration_file}
    id: casita_listening
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${thinking_illustration_file}
    id: casita_thinking
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${replying_illustration_file}
    id: casita_replying
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${timer_finished_illustration_file}
    id: casita_timer_finished
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${mute_illustration_file}
    id: casita_muted
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${error_no_ha_file}
    id: error_no_ha
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${error_no_wifi_file}
    id: error_no_wifi
    resize: 466x466
    type: RGB565
    transparency: alpha_channel

  - file: ${error_illustration_file}
    id: casita_error
    resize: 466x466
    type: RGB565
    transparency: alpha_channel
    
font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
      italic: true
    id: font_request
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_timer
    size: 16
    glyphsets:
      - ${font_glyphsets}

text_sensor:
  - id: text_request
    platform: template
    name: "Text Request"
    on_value:
      lambda: |-
        if(id(text_request).state.length()>30) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    name: "Text Response"
    on_value:
      lambda: |-
        if(id(text_response).state.length()>30) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"

# QSPI configuration for 1.75" AMOLED display
spi:
  - id: display_spi
    type: quad
    clk_pin: GPIO38
    data_pins: [4, 5, 6, 7]

# CST9217/FT3168 touchscreen configuration
touchscreen:
  - platform: cst816
    id: my_touchscreen
    i2c_id: bus_a
    interrupt_pin: GPIO11
    reset_pin: GPIO40
    on_touch:
      then:
        - logger.log:
            format: Touch %d at (%d, %d)
            args: [touch.id, touch.x, touch.y]
        - binary_sensor.template.publish:
            id: touch_input
            state: ON
    on_release:
      then:
        - binary_sensor.template.publish:
            id: touch_input
            state: OFF

# 1.75" Round AMOLED Display Configuration (466x466 with CO5300 Driver)
display:
  - platform: qspi_dbi
    model: CUSTOM
    id: main_display
    spi_id: display_spi
    cs_pin: GPIO12
    reset_pin: GPIO39
    # te_pin: GPIO13  # optional tearing effect sync
    dimensions:
      width: 466
      height: 466
    color_order: RGB
    invert_colors: false
    brightness: 255
    update_interval: never
    init_sequence:
      - [0x11]                 # Sleep Out
      - [0xFE, 0x00]           # Command Set extension
      - [0xC4, 0x80]           # SPI Interface Control (enable QSPI mode)
      - [0x3A, 0x55]           # Pixel Format: 16-bit/pixel
      - [0x53, 0x20]           # Display Control (Dimming enabled)
      - [0x63, 0xFF]           # Display Brightness (max brightness)
      - [0x29]                 # Display ON
      - [0x51, 0xD0]           # Write Display Brightness (normal brightness)
      - [0x58, 0x00]           # Disable contrast enhance

    pages:
      - id: idle_page
        lambda: |-
          it.fill(id(idle_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_idle), ImageAlign::CENTER);
          it.printf(233, 370, id(font_response), Color::WHITE, TextAlign::CENTER, "Home Assistant");
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();
      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_listening), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_thinking), ImageAlign::CENTER);
          if (id(show_text).state) {
            it.filled_rectangle(60, 20, 346, 50, Color::WHITE);
            it.rectangle(60, 20, 346, 50, Color::BLACK);
            it.printf(233, 30, id(font_request), Color::BLACK, TextAlign::CENTER, "%s", id(text_request).state.c_str());
          }
          id(draw_timer_timeline).execute();
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_replying), ImageAlign::CENTER);
          if (id(show_text).state) {
            it.filled_rectangle(60, 396, 346, 50, Color::WHITE);
            it.rectangle(60, 396, 346, 50, Color::BLACK);
            it.printf(233, 406, id(font_response), Color::BLACK, TextAlign::CENTER, "%s", id(text_response).state.c_str());
          }
          id(draw_timer_timeline).execute();
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_initializing), ImageAlign::CENTER);
          it.printf(233, 370, id(font_response), Color::WHITE, TextAlign::CENTER, "Home Assistant");
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
          it.filled_circle(233, 233, 230, Color::BLACK);
          it.image(233, 233, id(casita_muted), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();

number:
  - platform: template
    name: "Screen Brightness"
    id: screen_brightness
    min_value: 0
    max_value: 255
    step: 1
    initial_value: 200
    set_action:
      - lambda: |-
          // Note: Brightness control not available on GC9A01
          ESP_LOGW("brightness", "Brightness control not supported on this display");
